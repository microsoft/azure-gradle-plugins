/*
 * MIT License
 *
 * Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import org.gradle.api.tasks.options.Option

plugins {
    id "net.linguica.maven-settings" version "0.5"
    id "com.gradle.plugin-publish" version "0.10.1"
    id "nu.studer.credentials" version "2.1"
}
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'

checkstyle {
    toolVersion '8.29';
    // Whether or not to allow the build to continue if there are warnings.
    ignoreFailures = false

    // Whether or not rule violations are to be displayed on the console.
    showViolations = true
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()    
}
dependencies {
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.reflections:reflections:0.9.11'
    implementation 'com.microsoft.azure.functions:azure-functions-java-library:1.3.0'
    implementation 'org.atteo.classindex:classindex:3.4'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'com.github.zafarkhaja:java-semver:0.9.0'
    implementation 'com.microsoft.azure:azure:1.28.0'
    implementation 'com.microsoft.azure:azure-auth-helper:0.1.0'
    implementation 'com.microsoft.azure:azure-tools-common:0.1.0'
    implementation 'com.microsoft.azure:azure-auth-helper:0.1.0'
    implementation 'org.fusesource.jansi:jansi:1.18'
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:3.1.0"
}

gradlePlugin {
    plugins {
        "${project.pluginDisplayName}" {
            id                  = project.pluginId
            implementationClass = project.pluginImplementationClass
        }
    }
}


class PrepareResourceTask extends DefaultTask {
    @Option(option = "release", description = "whether this build is a release build.")
    Boolean release;
    
    Project currentProject

    @TaskAction
    void prepare() {
        new File(currentProject.projectDir, "src/main/resources/version.txt").text = currentProject.version
        def text = new File(currentProject.projectDir, "src/main/resources/ApplicationInsightsTemplate.xml").text
        text = text.replaceAll("\\{AI_KEY}", (release != null && release) ? "435bdea7-d399-49ee-8d2d-b2792aa060d2" : "fda156f5-2eb8-48ab-8a3c-3e06b3c64b49")
        new File(currentProject.projectDir, "src/main/resources/ApplicationInsights.xml").text = text;
    }
}

task prepareResources(type: PrepareResourceTask) {
    currentProject = project
}

task prepareReleaseResources(type: PrepareResourceTask) {
    currentProject = project
    release = true
}

pluginBundle {
    website = 'https://github.com/microsoft/azure-gradle-plugins/wiki'
    vcsUrl = 'https://github.com/microsoft/azure-gradle-plugins'

    plugins {
        "${project.pluginDisplayName}" {
            id = project.pluginId
            displayName = 'Azure Functions Plugin for Gradle'
            version = project.version
            description = 'Azure Functions Plugin for gradle'
            tags = ['microsoft', 'azure', 'functions', 'cloud', 'serverless', 'deploy']
        }
    }
}

task setupPluginPublishSecret {
    doLast {
        def key = credentials['gradle.publish.key']
        def secret = credentials['gradle.publish.secret']
        if( !key || !secret) {
            throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined")
        }

        System.properties.setProperty("gradle.publish.key", key)
        System.properties.setProperty("gradle.publish.secret", secret)
    }
}

tasks.publishPlugins.dependsOn tasks.setupPluginPublishSecret
